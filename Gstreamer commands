If you want to build a GStreamer pipeline without using `decodebin`, you need to explicitly specify the elements required for decoding the specific media format of your input file. This can include demuxers, decoders, and parsers. The exact elements will depend on the format of your video file (e.g., MP4, MKV, AVI).

Here is an example of how to construct a GStreamer pipeline to play an MP4 file without using `decodebin`. This example assumes the video codec is H.264 and the audio codec is AAC, which are common codecs for MP4 files.

### Step-by-Step Example

#### Video Pipeline without `decodebin`

1. **Identify the elements needed**:
   - `filesrc`: Reads from the file.
   - `qtdemux`: Demuxes MP4 containers.
   - `h264parse`: Parses H.264 streams.
   - `avdec_h264`: Decodes H.264 video.
   - `autovideosink`: Displays video.

2. **Command Line Pipeline**:
   ```bash
   gst-launch-1.0 filesrc location=video.mp4 ! qtdemux name=demux demux.video_0 ! h264parse ! avdec_h264 ! videoconvert ! autovideosink
   ```

   - `qtdemux name=demux`: Demuxer for MP4. Assigns the name "demux" for further reference.
   - `demux.video_0 ! h264parse ! avdec_h264 ! videoconvert ! autovideosink`: Links the video stream to the parser, decoder, converter, and sink.

#### Video and Audio Pipeline without `decodebin`

1. **Identify additional elements needed**:
   - `aacparse`: Parses AAC streams.
   - `avdec_aac`: Decodes AAC audio.
   - `audioconvert` and `audioresample`: Prepare audio for playback.
   - `autoaudiosink`: Plays audio.

2. **Command Line Pipeline**:
   
   gst-launch-1.0 filesrc location=video.mp4 ! qtdemux name=demux demux.video_0 ! h264parse ! avdec_h264 ! videoconvert ! autovideosink demux.audio_0 ! aacparse ! avdec_aac ! audioconvert ! audioresample ! autoaudiosink
   ```

   - `demux.audio_0 ! aacparse ! avdec_aac ! audioconvert ! audioresample ! autoaudiosink`: Links the audio stream to the parser, decoder, converter, resampler, and sink.

### Explanation

- `filesrc location=video.mp4`: Specifies the source file.
- `qtdemux name=demux`: Demuxes the MP4 container. The name `demux` is used to refer to the demuxed streams.
- `demux.video_0`: Refers to the first video stream from the demuxer.
- `h264parse`: Parses the H.264 video stream.
- `avdec_h264`: Decodes the H.264 video stream.
- `videoconvert`: Converts the video format to ensure compatibility with the video sink.
- `autovideosink`: Automatically selects an appropriate video sink.
- `demux.audio_0`: Refers to the first audio stream from the demuxer.
- `aacparse`: Parses the AAC audio stream.
- `avdec_aac`: Decodes the AAC audio stream.
- `audioconvert`: Converts audio formats to ensure compatibility with the audio sink.
- `audioresample`: Resamples audio to ensure compatibility with the audio sink.
- `autoaudiosink`: Automatically selects an appropriate audio sink.

### Summary

By specifying each element explicitly, you gain fine-grained control over the pipeline, which can be useful for debugging or for handling specific formats that `decodebin` might not handle correctly. This approach also allows you to optimize the pipeline for specific use cases.
